import argparse
import enum
from typing import Any 

from classopt import classopt
from classopt import config as c

from .config import Benchmark, LogLevel, VCPUBind, YcsbWorkload


# credit: https://stackoverflow.com/a/70124136 https://stackoverflow.com/a/60750535
class EnumAction(argparse.Action):
    """
    Argparse action for handling Enums
    """

    def __init__(self, **kwargs):
        # Pop off the type value
        enum_type = kwargs.pop("type", None)

        # Ensure an Enum subclass is provided
        if enum_type is None:
            raise ValueError("type must be assigned an Enum when using EnumAction")
        if not issubclass(enum_type, enum.Enum):
            raise TypeError("type must be an Enum when using EnumAction")

        # Generate choices from the Enum
        kwargs.setdefault("choices", tuple(e.name for e in enum_type))

        super(EnumAction, self).__init__(**kwargs)

        self._enum = enum_type

    def __call__(
        self,
        parser: argparse.ArgumentParser,
        namespace: argparse.Namespace,
        value: Any,
        option_string: str = None,
    ):
        # Convert value back into an Enum
        if isinstance(value, str):
            value = self._enum[value]
            setattr(namespace, self.dest, value)
        elif value is None:
            raise argparse.ArgumentTypeError(
                f"You need to pass a value after {option_string}!"
            )
        else:
            # A pretty invalid choice message will be generated by argparse
            raise argparse.ArgumentTypeError()


@classopt(default_long=True)
class Opt:
    """Command line arguements, usage: `opt = Opt.from_args()`"""

    num: int = c(help="How many VMs to launch")
    ncpus: int = c(default=4, help="How many vCPUs for each VM")
    bind: VCPUBind = c(
        type=VCPUBind,
        default=VCPUBind.CORE,
        action=EnumAction,
        help="Bind guest CPU to certain host node or vCPU",
    )
    memory: int = c(default=8 << 30, help="How memory in byte for each VM")
    dram_ratio: float = c(default=0.2, help="Initial DRAM ratio out of all system-ram")
    log_level: LogLevel = c(
        default=LogLevel.INFO,
        type=LogLevel,
        action=EnumAction,
        help="Logging level, defaults to info",
    )
    perf: str = c(help="Enable perf events collection in guests")
    memory_mode: bool = c(help="Enable memory mode")
    bench: Benchmark = c(
        type=Benchmark,
        action=EnumAction,
        help="Benchmark to run",
    )
    workload: YcsbWorkload = c(
        default=YcsbWorkload.A,
        type=YcsbWorkload,
        action=EnumAction,
        help="Which ycsb workload to run on redis",
    )
